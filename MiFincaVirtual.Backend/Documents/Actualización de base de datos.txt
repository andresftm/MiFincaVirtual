Add-Migration <Nombre de la migracion>

Luego ejecuco el comando Update-Database

Y verifico que el campo quede en la base de datos

El data context en el domain quedo así

namespace MiFincaVirtual.Domain.Models
{
    using MiFincaVirtual.Common.Models;
    using System.Data.Entity;

    public class DataContext: DbContext
    {
        public DataContext():  base("DefaultConnection")
        {
                
        }

        public DbSet<Ordenos> Ordenos { get; set; }

        public System.Data.Entity.DbSet<MiFincaVirtual.Common.Models.Leches> Leches { get; set; }
    }
}

La clase configuraciones en el domain así

namespace MiFincaVirtual.Domain.Migrations
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<MiFincaVirtual.Domain.Models.DataContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = true;
            AutomaticMigrationDataLossAllowed = true;

        }

        protected override void Seed(MiFincaVirtual.Domain.Models.DataContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data.
        }
    }
}

El gloaxax en el backend quedó así

namespace MiFincaVirtual.Backend
{

    using System.Configuration;
    using System.Data.Entity;
    using System.Web.Mvc;
    using System.Web.Optimization;
    using System.Web.Routing;
    using MiFincaVirtual.Backend.Models;

    public class MvcApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            Database.SetInitializer(new MigrateDatabaseToLatestVersion<LocalDataContext, Migrations.Configuration>());
            AreaRegistration.RegisterAllAreas();
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
}

y la clase configuración en el backend quedó así.

namespace MiFincaVirtual.Backend.Migrations
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Migrations;
    using System.Linq;

    internal sealed class Configuration : DbMigrationsConfiguration<MiFincaVirtual.Backend.Models.LocalDataContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
            AutomaticMigrationDataLossAllowed = true;
        }

        protected override void Seed(MiFincaVirtual.Backend.Models.LocalDataContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data.
        }
    }
}
